{"version":3,"sources":["../../src/ext/tags.js"],"names":[],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,OAAP,GAAiB;;AAEb;;;AAGA,eAAY,WALC;;AAOb;AACA,0BAAuB,QARV;;AAUb;AACA,0BAAuB,QAXV;;AAab;;;AAGA,WAAQ,OAhBK;;AAkBb;;;;AAIA,eAAY,WAtBC;;AAwBb;;;AAGA,uBAAoB,mBA3BP;;AA6Bb;;;;;AAKA;AACA,kBAAe,cAnCF;;AAqCb;AACA,mBAAgB,eAtCH;;AAwCb;AACA,oBAAiB,WAzCJ;;AA2Cb;AACA,oBAAiB,WA5CJ;;AA8Cb;AACA,eAAY,WA/CC;;AAiDb;;;;AAIA;AACA;AACA,cAAW,UAvDE;;AAyDb;AACA;AACA,iBAAc,aA3DD;;AA6Db;AACA;AACA,sBAAmB;AA/DN,CAAjB","file":"tags.js","sourcesContent":["// Copyright (c) 2016 Resonance Labs, Inc\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// Here we define standard names for tags that can be added to spans by the\n// instrumentation code. The actual tracing systems are not required to\n// retain these as tags in the stored spans if they have other means of\n// representing the same data. For example, the SPAN_KIND:'server' can be\n// inferred from a Zipkin span by the presence of ss/sr annotations.\n// For more information visit http://opentracing.io/data-semantics/\n\nmodule.exports = {\n\n    /** ------------------------------------------------------------------------\n    * SPAN_KIND hints at relationship between spans, e.g. client/server\n    * --------------------------------------------------------------------------*/\n    SPAN_KIND : 'span.kind',\n\n    // Marks a span representing the client-side of an RPC or other remote call\n    SPAN_KIND_RPC_CLIENT : 'client',\n\n    // Marks a span representing the server-side of an RPC or other remote call\n    SPAN_KIND_RPC_SERVER : 'server',\n\n    /** ------------------------------------------------------------------------\n    * ERROR (boolean) indicates whether a Span ended in an error state.\n    * --------------------------------------------------------------------------*/\n    ERROR : 'error',\n\n    /** ------------------------------------------------------------------------\n    * COMPONENT (string) ia s low-cardinality identifier of the module, library,\n    * or package that is generating a span.\n    * --------------------------------------------------------------------------*/\n    COMPONENT : 'component',\n\n    /** ------------------------------------------------------------------------\n    * SAMPLING_PRIORITY (number) determines the priority of sampling this Span.\n    * --------------------------------------------------------------------------*/\n    SAMPLING_PRIORITY : 'sampling.priority',\n\n    /** ------------------------------------------------------------------------\n    * PEER_* tags can be emitted by either client-side of server-side to describe\n    * the other side/service in a peer-to-peer communications, like an RPC call.\n    * ---------------------------------------------------------------------------*/\n\n    // PEER_SERVICE (string) records the service name of the peer\n    PEER_SERVICE : 'peer.service',\n\n    // PEER_HOSTNAME records the host name of the peer\n    PEER_HOSTNAME : 'peer.hostname',\n\n    // PEER_HOST_IPV4 (number) records IP v4 host address of the peer\n    PEER_HOST_IPV4 : 'peer.ipv4',\n\n    // PEER_HOST_IPV6 (string) records IP v6 host address of the peer\n    PEER_HOST_IPV6 : 'peer.ipv6',\n\n    // PEER_PORT (number) records port number of the peer\n    PEER_PORT : 'peer.port',\n\n    /** ------------------------------------------------------------------------\n    * HTTP tags\n    * ---------------------------------------------------------------------------*/\n\n    // HTTP_URL (string) should be the URL of the request being handled in this\n    // segment of the trace, in standard URI format. The protocol is optional.\n    HTTP_URL : 'http.url',\n\n    // HTTP_METHOD (string) is the HTTP method of the request.\n    // Both upper/lower case values are allowed.\n    HTTP_METHOD : 'http.method',\n\n    // HTTP_STATUS_CODE (number) is the numeric HTTP status code (200, 404, etc)\n    // of the HTTP response.\n    HTTP_STATUS_CODE : 'http.status_code',\n};\n"]}