{"version":3,"sources":["../src/singleton.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;IAAY,S;;AACZ;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;IAMqB,S;;;;;;;AAEjB;AACA;AACA;;AAEA;;;;;;;yCAOiB,S,EAAW;AACxB,iBAAK,IAAL,GAAY,SAAZ;;AAEA;AACA;AACA,gBAAI,SAAJ,EAAe;AACX,0BAAU,YAAV,CAAuB,IAAvB;AACH;AACJ;;AAED;;;;;;;;sCAKc,S,EAAW;AACrB,gBAAI,SAAS,qBAAW,SAAX,CAAb;AACA,gBAAI,SAAJ,EAAe;AACX,0BAAU,YAAV,CAAuB,IAAvB;AACH;AACD,mBAAO,MAAP;AACH;;AAED;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAWA,yBAAc;AAAA;;AAGV;AACA;AAJU;;AAKV,aAAK,IAAI,GAAT,IAAgB,SAAhB,EAA2B;AAAS;AAChC,kBAAK,GAAL,IAAY,UAAU,GAAV,CAAZ;AACH;AACD,cAAK,SAAL;;AAEA;AACA,cAAK,aAAL;AAXU;AAYb;;;;;kBA/DgB,S","file":"singleton.js","sourcesContent":["'use strict';\n\nimport Tracer from './tracer';\nimport * as Constants from './constants';\nimport BinaryCarrier from './binary_carrier';\nimport Reference from './reference';\n\n/**\n * The Singleton object is the default export of the package and extends the\n * standard Tracer object so that the default\n * exported object of the package can be conveniently be used both as the\n * default tracer and an interface to the library.\n */\nexport default class Singleton extends Tracer {\n\n    // ---------------------------------------------------------------------- //\n    // OpenTracing API methods\n    // ---------------------------------------------------------------------- //\n\n    /**\n     * Set the global Tracer's underlying implementation.\n     *\n     * The behavior is undefined if this function is called more than once.\n     *\n     * @param {TracerImp} tracerImp - the Tracer implementation object\n     */\n    initGlobalTracer(tracerImp) {\n        this._imp = tracerImp;\n\n        // Provide the implementation with a handle to the interface. This can\n        // also be used a post-initialization signal.\n        if (tracerImp) {\n            tracerImp.setInterface(this);\n        }\n    }\n\n    /**\n     * Create a new Tracer object with the given underlying implementation.\n     *\n     * @return {Tracer} a new Tracer object\n     */\n    initNewTracer(tracerImp) {\n        let tracer = new Tracer(tracerImp);\n        if (tracerImp) {\n            tracerImp.setInterface(this);\n        }\n        return tracer;\n    }\n\n    // ---------------------------------------------------------------------- //\n    // Private and non-standard methods\n    // ---------------------------------------------------------------------- //\n\n    /* For internal use only:\n     *\n     * Creates the Singleton with no underlying implementation (i.e. defaults\n     * to no-op behavior for all functions).\n     *\n     * The OpenTracing package-level object acts both at the singleton and the\n     * package interface itself, so this Singleton is both a the Tracer and\n     * also includes all the global library symbols.\n     *\n     * Note: this should never be called directly by consumers of the library.\n     */\n    constructor() {\n        super();\n\n        // Merge the constants into the singleton object so they are accessible at the\n        // package level.\n        for (let key in Constants) {        // eslint-disable-line no-restricted-syntax\n            this[key] = Constants[key];\n        }\n        this.Reference = Reference;\n\n        // Carrier objects to be exposed at the package level\n        this.BinaryCarrier = BinaryCarrier;\n    }\n}\n"]}