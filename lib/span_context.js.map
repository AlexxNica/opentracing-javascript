{"version":3,"sources":["../src/span_context.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;IAUqB,W;AACjB;;;;;;AAMA,uBAAY,GAAZ,EAAiB;AAAA;;AACb,SAAK,IAAL,GAAY,GAAZ;AACH;;AAED;;;;;;;;0BAIM;AACF,aAAO,KAAK,IAAZ;AACH;;;;;;kBAjBgB,W","file":"span_context.js","sourcesContent":["'use strict';\n\n/**\n * SpanContext represents Span state that must propagate to descendant Spans\n * and across process boundaries.\n *\n * SpanContext is logically divided into two pieces: the user-level \"Baggage\"\n * (see setBaggageItem and getBaggageItem) that propagates across Span\n * boundaries and any Tracer-implementation-specific fields that are needed to\n * identify or otherwise contextualize the associated Span instance (e.g., a\n * <trace_id, span_id, sampled> tuple).\n */\nexport default class SpanContext {\n    /**\n     * Constructs a new SpanContext object.\n     *\n     * This method should not be called directly; Span.context() should be used\n     * instead.\n     */\n    constructor(imp) {\n        this._imp = imp;\n    }\n\n    /**\n     * Returns the SpanContext implementation object. The returned object is by\n     * its nature entirely implementation-dependent.\n     */\n    imp() {\n        return this._imp;\n    }\n}\n"]}